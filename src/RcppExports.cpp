// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// haversine_dist
double haversine_dist(double olat1, double olon1, double olat2, double olon2);
RcppExport SEXP _whichWithin_haversine_dist(SEXP olat1SEXP, SEXP olon1SEXP, SEXP olat2SEXP, SEXP olon2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< double >::type olat1(olat1SEXP);
    Rcpp::traits::input_parameter< double >::type olon1(olon1SEXP);
    Rcpp::traits::input_parameter< double >::type olat2(olat2SEXP);
    Rcpp::traits::input_parameter< double >::type olon2(olon2SEXP);
    rcpp_result_gen = Rcpp::wrap(haversine_dist(olat1, olon1, olat2, olon2));
    return rcpp_result_gen;
END_RCPP
}
// do_which_within
List do_which_within(DoubleVector lat, DoubleVector lon, double r);
RcppExport SEXP _whichWithin_do_which_within(SEXP latSEXP, SEXP lonSEXP, SEXP rSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type lat(latSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type lon(lonSEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    rcpp_result_gen = Rcpp::wrap(do_which_within(lat, lon, r));
    return rcpp_result_gen;
END_RCPP
}
// engrid
IntegerVector engrid(DoubleVector x, DoubleVector y, double r, double xmin, double xmax, double ymin, double ymax, int nThread);
RcppExport SEXP _whichWithin_engrid(SEXP xSEXP, SEXP ySEXP, SEXP rSEXP, SEXP xminSEXP, SEXP xmaxSEXP, SEXP yminSEXP, SEXP ymaxSEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type r(rSEXP);
    Rcpp::traits::input_parameter< double >::type xmin(xminSEXP);
    Rcpp::traits::input_parameter< double >::type xmax(xmaxSEXP);
    Rcpp::traits::input_parameter< double >::type ymin(yminSEXP);
    Rcpp::traits::input_parameter< double >::type ymax(ymaxSEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(engrid(x, y, r, xmin, xmax, ymin, ymax, nThread));
    return rcpp_result_gen;
END_RCPP
}
// do_minmax
DoubleVector do_minmax(DoubleVector x, DoubleVector y, int nThread);
RcppExport SEXP _whichWithin_do_minmax(SEXP xSEXP, SEXP ySEXP, SEXP nThreadSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::traits::input_parameter< DoubleVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< DoubleVector >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type nThread(nThreadSEXP);
    rcpp_result_gen = Rcpp::wrap(do_minmax(x, y, nThread));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_whichWithin_haversine_dist", (DL_FUNC) &_whichWithin_haversine_dist, 4},
    {"_whichWithin_do_which_within", (DL_FUNC) &_whichWithin_do_which_within, 3},
    {"_whichWithin_engrid", (DL_FUNC) &_whichWithin_engrid, 8},
    {"_whichWithin_do_minmax", (DL_FUNC) &_whichWithin_do_minmax, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_whichWithin(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
